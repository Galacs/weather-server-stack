# Do not use this configuration in production.
# It is for demonstration purposes only.
# Run Mimir in single process mode, with all components running in 1 process. 
target: all,alertmanager,overrides-exporter

multitenancy_enabled: false

# Configure Mimir to use Minio as its object storage backend. 
blocks_storage:
  backend: filesystem
  filesystem:
    dir: /data/storage

#   backend: s3
#   s3:
#     endpoint: minio:9000
#     bucket_name: mimir-blocks
#     access_key_id: mimir
#     secret_access_key: supersecret
#     insecure: true
  tsdb:
    dir: /data/ingester

# Use memberlist, a gossip-based protocol, to enable the 3 Mimir replicas to communicate 
memberlist:
  join_members: [ mimir ]

limits:
  ingestion_rate: 1000000

ruler:
  rule_path: /data/ruler
  alertmanager_url: http://127.0.0.1:8080/alertmanager
  ring:
    # Quickly detect unhealthy rulers to speed up the tutorial.
    heartbeat_period: 2s
    heartbeat_timeout: 10s

# ruler_storage:
#   backend: s3
#   s3:
#     endpoint: minio:9000
#     bucket_name: mimir-ruler
#     access_key_id: mimir
#     secret_access_key: supersecret
#     insecure: true

alertmanager:
  data_dir: /data/alertmanager
  fallback_config_file: /etc/alertmanager-fallback-config.yaml
  external_url: http://localhost:9009/alertmanager

# alertmanager_storage:
#   backend: s3
#   s3:
#     endpoint: minio:9000
#     bucket_name: mimir-alertmanager
#     access_key_id: mimir
#     secret_access_key: supersecret
#     insecure: true

ingester:
  ring:
    instance_addr: 127.0.0.1
    kvstore:
      store: memberlist
    replication_factor: 1

server:
  http_listen_port: 9009
  log_level: info
